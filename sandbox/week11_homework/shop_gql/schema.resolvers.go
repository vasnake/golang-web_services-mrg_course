package main

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"strconv"
)

// Parent is the resolver for the parent field.
func (r *catalogResolver) Parent(ctx context.Context, obj *Catalog) (*Catalog, error) {
	panic(fmt.Errorf("catalogResolver not implemented: Parent - parent"))
}

// Childs is the resolver for the childs field.
func (r *catalogResolver) Childs(ctx context.Context, obj *Catalog) ([]*Catalog, error) {
	// cid, err := strconv.Atoi(obj.ID)
	// cid := obj.ID
	// if err != nil {
	// 	return nil, fmt.Errorf("catalogResolver.Childs failed, can't parse id string: %w", err)
	// }
	children, err := r.dataAdapter.GetCatalogChildrenByParentID(obj.ID)
	if err != nil {
		return nil, fmt.Errorf("catalogResolver.Childs failed, can't find children: %w", err)
	}
	return children, nil
}

// Items is the resolver for the items field.
func (r *catalogResolver) Items(ctx context.Context, obj *Catalog, limit *int, offset *int) ([]*Item, error) {
	firstN, startFrom := actualLimitOffset(limit, offset, 0, len(obj.ItemsIDList))

	result := make([]*Item, 0, firstN)

	for _, iid := range obj.ItemsIDList[startFrom : startFrom+firstN] {
		item, err := r.dataAdapter.GetItemByID(iid)
		panicOnError("catalogResolver.Items failed, can't find Item by id: ", err)
		result = append(result, item)
	}

	return result, nil
}

// Parent is the resolver for the parent field.
func (r *itemResolver) Parent(ctx context.Context, obj *Item) (*Catalog, error) {
	return r.dataAdapter.GetCatalogByID(obj.CatalogID)
}

// Seller is the resolver for the seller field.
func (r *itemResolver) Seller(ctx context.Context, obj *Item) (*Seller, error) {
	seller, err := r.dataAdapter.GetSellerByID(obj.SellerID)
	if err != nil {
		return nil, fmt.Errorf("itemResolver.Seller failed, can't find seller by id: %w", err)
	}
	return seller, nil
}

// InCart is the resolver for the inCart field.
func (r *itemResolver) InCart(ctx context.Context, obj *Item) (int, error) {
	// items count in user shopping cart
	cartItems, err := r.dataAdapter.GetShoppingCartItems(ctx)
	if err != nil {
		return 0, fmt.Errorf("itemResolver.InCart failed: %w", err)
	}

	for _, ci := range cartItems {
		if ci.Item.ID == obj.ID {
			return ci.Quantity, nil
		}
	}

	return 0, nil
}

// InStockText is the resolver for the inStockText field.
func (r *itemResolver) InStockText(ctx context.Context, obj *Item) (string, error) {
	return obj.InStockText, nil
}

// AddToCart is the resolver for the AddToCart field.
func (r *mutationResolver) AddToCart(ctx context.Context, in *CartInput) ([]*CartItem, error) {
	err := r.dataAdapter.AddToShoppingCart(ctx, in.ItemID, in.Quantity)
	if err != nil {
		return nil, err // fmt.Errorf("mutationResolver.AddToCart failed: %w", err)
	}
	// show("items added to cart")

	cartItems, err := r.dataAdapter.GetShoppingCartItems(ctx)
	if err != nil {
		return nil, fmt.Errorf("mutationResolver.AddToCart failed: %w", err)
	}
	// show("cart content retrieved: ", cartItems)

	// cartItems := make([]*CartItem, 0, 16)
	return cartItems, nil
}

// RemoveFromCart is the resolver for the RemoveFromCart field.
func (r *mutationResolver) RemoveFromCart(ctx context.Context, in CartInput) ([]*CartItem, error) {
	ci := in
	ci.Quantity = 0 - ci.Quantity
	return r.AddToCart(ctx, &ci)
}

// Catalog is the resolver for the Catalog field.
func (r *queryResolver) Catalog(ctx context.Context, id *string) (*Catalog, error) {
	cid, err := strconv.Atoi(*id)
	if err != nil {
		return nil, fmt.Errorf("queryResolver.Catalog failed, can't parse id string: %w", err)
	}
	c, err := r.dataAdapter.GetCatalogByID(cid)
	if err != nil {
		return nil, fmt.Errorf("queryResolver.Catalog failed, can't find Catalog by id: %w", err)
	}
	return c, nil
}

// Shop is the resolver for the Shop field.
func (r *queryResolver) Shop(ctx context.Context, parentID *string) ([]*Catalog, error) {
	panic(fmt.Errorf("not implemented: Shop - Shop"))
}

// Seller is the resolver for the Seller field.
func (r *queryResolver) Seller(ctx context.Context, id *string) (*Seller, error) {
	sid, err := strconv.Atoi(*id)
	if err != nil {
		return nil, fmt.Errorf("queryResolver.Seller failed, can't parse id string: %w", err)
	}
	s, err := r.dataAdapter.GetSellerByID(sid)
	if err != nil {
		return nil, fmt.Errorf("queryResolver.Seller failed, can't find Seller by id: %w", err)
	}
	return s, nil
}

// MyCart is the resolver for the MyCart field.
func (r *queryResolver) MyCart(ctx context.Context) ([]*CartItem, error) {
	cartItems, err := r.dataAdapter.GetShoppingCartItems(ctx)
	if err != nil {
		return nil, fmt.Errorf("mutationResolver.AddToCart failed: %w", err)
	}
	return cartItems, nil
}

// Items is the resolver for the items field.
func (r *sellerResolver) Items(ctx context.Context, obj *Seller, limit *int, offset *int) ([]*Item, error) {
	firstN, startFrom := actualLimitOffset(limit, offset, 0, len(obj.ItemsIDList))

	result := make([]*Item, 0, firstN)

	for _, iid := range obj.ItemsIDList[startFrom : startFrom+firstN] {
		item, err := r.dataAdapter.GetItemByID(iid)
		panicOnError("sellerResolver.Items failed, can't find Item by id: ", err)
		result = append(result, item)
	}

	return result, nil
}

// Catalog returns CatalogResolver implementation.
func (r *Resolver) Catalog() CatalogResolver { return &catalogResolver{r} }

// Item returns ItemResolver implementation.
func (r *Resolver) Item() ItemResolver { return &itemResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Seller returns SellerResolver implementation.
func (r *Resolver) Seller() SellerResolver { return &sellerResolver{r} }

type catalogResolver struct{ *Resolver }
type itemResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type sellerResolver struct{ *Resolver }
