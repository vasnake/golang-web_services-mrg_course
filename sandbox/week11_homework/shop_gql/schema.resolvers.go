package main

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
)

// Catalog is the resolver for the Catalog field.
func (r *queryResolver) Catalog(ctx context.Context, id *string) (*Catalog, error) {
	return &Catalog{}, nil
}

// Childs is the resolver for the childs field.
func (r *catalogResolver) Childs(ctx context.Context, obj *Catalog) ([]*Catalog, error) {
	var catalogChildren = make([]*Catalog, 0, 16)
	return catalogChildren, nil
}

// Parent is the resolver for the parent field.
func (r *catalogResolver) Parent(ctx context.Context, obj *Catalog) (*Catalog, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// Items is the resolver for the items field.
func (r *catalogResolver) Items(ctx context.Context, obj *Catalog, limit *int, offset *int) ([]*Item, error) {
	panic(fmt.Errorf("not implemented: Items - items"))
}

// Parent is the resolver for the parent field.
func (r *itemResolver) Parent(ctx context.Context, obj *Item) (*Catalog, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// Seller is the resolver for the seller field.
func (r *itemResolver) Seller(ctx context.Context, obj *Item) (*Seller, error) {
	panic(fmt.Errorf("not implemented: Seller - seller"))
}

// InCart is the resolver for the inCart field.
func (r *itemResolver) InCart(ctx context.Context, obj *Item) (int, error) {
	panic(fmt.Errorf("not implemented: InCart - inCart"))
}

// InStockText is the resolver for the inStockText field.
func (r *itemResolver) InStockText(ctx context.Context, obj *Item) (string, error) {
	panic(fmt.Errorf("not implemented: InStockText - inStockText"))
}

// AddToCart is the resolver for the AddToCart field.
func (r *mutationResolver) AddToCart(ctx context.Context, in *CartInput) ([]*CartItem, error) {
	panic(fmt.Errorf("not implemented: AddToCart - AddToCart"))
}

// RemoveFromCart is the resolver for the RemoveFromCart field.
func (r *mutationResolver) RemoveFromCart(ctx context.Context, in CartInput) ([]*CartItem, error) {
	panic(fmt.Errorf("not implemented: RemoveFromCart - RemoveFromCart"))
}

// Shop is the resolver for the Shop field.
func (r *queryResolver) Shop(ctx context.Context, parentID *string) ([]*Catalog, error) {
	panic(fmt.Errorf("not implemented: Shop - Shop"))
}

// Seller is the resolver for the Seller field.
func (r *queryResolver) Seller(ctx context.Context, id *string) (*Seller, error) {
	panic(fmt.Errorf("not implemented: Seller - Seller"))
}

// MyCart is the resolver for the MyCart field.
func (r *queryResolver) MyCart(ctx context.Context) ([]*CartItem, error) {
	panic(fmt.Errorf("not implemented: MyCart - MyCart"))
}

// Items is the resolver for the items field.
func (r *sellerResolver) Items(ctx context.Context, obj *Seller, limit *int, offset *int) ([]*Item, error) {
	panic(fmt.Errorf("not implemented: Items - items"))
}

type catalogResolver struct{ *Resolver }
type itemResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type sellerResolver struct{ *Resolver }

// Catalog returns CatalogResolver implementation.
func (r *Resolver) Catalog() CatalogResolver { return &catalogResolver{r} }

// Item returns ItemResolver implementation.
func (r *Resolver) Item() ItemResolver { return &itemResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Seller returns SellerResolver implementation.
func (r *Resolver) Seller() SellerResolver { return &sellerResolver{r} }
